{"title":"C. Bear and Prime 100","contestId":"680","problemIndex":"C","timeLimit":"1 second","memLimit":"256 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p><span class=\"tex-font-style-bf\">This is an interactive problem. In the output section below you will see the information about flushing the output.</span></p><p>Bear Limak thinks of some hidden number&#xA0;&#x2014; an integer from interval <span class=\"tex-span\">[2,&#x2009;100]</span>. Your task is to say if the hidden number is prime or composite.</p><p>Integer <span class=\"tex-span\"><i>x</i>&#x2009;&gt;&#x2009;1</span> is called prime if it has exactly two distinct divisors, <span class=\"tex-span\">1</span> and <span class=\"tex-span\"><i>x</i></span>. If integer <span class=\"tex-span\"><i>x</i>&#x2009;&gt;&#x2009;1</span> is not prime, it&apos;s called composite.</p><p>You can ask up to <span class=\"tex-span\">20</span> queries about divisors of the hidden number. In each query you should print an integer from interval <span class=\"tex-span\">[2,&#x2009;100]</span>. The system will answer &quot;<span class=\"tex-font-style-tt\">yes</span>&quot; if your integer is a divisor of the hidden number. Otherwise, the answer will be &quot;<span class=\"tex-font-style-tt\">no</span>&quot;.</p><p>For example, if the hidden number is <span class=\"tex-span\">14</span> then the system will answer &quot;<span class=\"tex-font-style-tt\">yes</span>&quot; only if you print <span class=\"tex-span\">2</span>, <span class=\"tex-span\">7</span> or <span class=\"tex-span\">14</span>.</p><p>When you are done asking queries, print &quot;<span class=\"tex-font-style-tt\">prime</span>&quot; or &quot;<span class=\"tex-font-style-tt\">composite</span>&quot; and terminate your program.</p><p>You will get the <span class=\"tex-font-style-tt\">Wrong Answer</span> verdict if you ask more than <span class=\"tex-span\">20</span> queries, or if you print an integer not from the range <span class=\"tex-span\">[2,&#x2009;100]</span>. Also, you will get the <span class=\"tex-font-style-tt\">Wrong Answer</span> verdict if the printed answer isn&apos;t correct.</p><p>You will get the <span class=\"tex-font-style-tt\">Idleness Limit Exceeded</span> verdict if you don&apos;t print anything (but you should) or if you forget about flushing the output (more info below).</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>After each query you should read one string from the input. It will be &quot;<span class=\"tex-font-style-tt\">yes</span>&quot; if the printed integer is a divisor of the hidden number, and &quot;<span class=\"tex-font-style-tt\">no</span>&quot; otherwise.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Up to <span class=\"tex-span\">20</span> times you can ask a query&#xA0;&#x2014; print an integer from interval <span class=\"tex-span\">[2,&#x2009;100]</span> in one line. You have to both print the end-of-line character and <span class=\"tex-font-style-tt\">flush</span> the output. After flushing you should read a response from the input.</p><p>In any moment you can print the answer &quot;<span class=\"tex-font-style-tt\">prime</span>&quot; or &quot;<span class=\"tex-font-style-tt\">composite</span>&quot; (without the quotes). After that, flush the output and terminate your program.</p><p>To flush you can use (just after printing an integer and end-of-line): </p><ul> <li> <span class=\"tex-font-style-tt\">fflush(stdout)</span> in C++; </li><li> <span class=\"tex-font-style-tt\">System.out.flush()</span> in Java; </li><li> <span class=\"tex-font-style-tt\">stdout.flush()</span> in Python; </li><li> <span class=\"tex-font-style-tt\">flush(output)</span> in Pascal; </li><li> See the documentation for other languages. </li></ul><p><span class=\"tex-font-style-bf\">Hacking.</span> To hack someone, as the input you should print the hidden number&#xA0;&#x2014; one integer from the interval <span class=\"tex-span\">[2,&#x2009;100]</span>. Of course, his/her solution won&apos;t be able to read the hidden number from the input.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>The hidden number in the first query is <span class=\"tex-span\">30</span>. In a table below you can see a better form of the provided example of the communication process.</p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/ea790051c34ea7d2761cd9b096412ca7c647a173.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p><p>The hidden number is divisible by both <span class=\"tex-span\">2</span> and <span class=\"tex-span\">5</span>. Thus, it must be composite. Note that it isn&apos;t necessary to know the exact value of the hidden number. In this test, the hidden number is <span class=\"tex-span\">30</span>.</p><p><img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/35c6952617fa94ec3e0ea8e63aa1c3c49b3ba420.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p><p><span class=\"tex-span\">59</span> is a divisor of the hidden number. In the interval <span class=\"tex-span\">[2,&#x2009;100]</span> there is only one number with this divisor. The hidden number must be <span class=\"tex-span\">59</span>, which is prime. Note that the answer is known even after the second query and you could print it then and terminate. Though, it isn&apos;t forbidden to ask unnecessary queries (unless you exceed the limit of <span class=\"tex-span\">20</span> queries).</p>","sampleTestcases":[{"id":1613684400134,"input":"yes\nno\nyes\n","output":"2\n80\n5\ncomposite\n"},{"id":1613684400135,"input":"no\nyes\nno\nno\nno\n","output":"58\n59\n78\n78\n2\nprime\n"}],"submitUrl":"https://codeforces.com/contest/680/submit","language":"c++"}
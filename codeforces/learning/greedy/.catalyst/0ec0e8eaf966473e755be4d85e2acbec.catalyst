{"title":"A. Unusual Competitions","contestId":"1322","problemIndex":"A","timeLimit":"1 second","memLimit":"512 megabytes","inputFormat":"standard input","outputFormat":"standard output","problemHtml":"<p>A bracketed sequence is called correct (regular) if by inserting &quot;+&quot; and &quot;1&quot; you can get a well-formed mathematical expression from it. For example, sequences &quot;<span class=\"tex-font-style-tt\">(())()</span>&quot;, &quot;<span class=\"tex-font-style-tt\">()</span>&quot; and &quot;<span class=\"tex-font-style-tt\">(()(()))</span>&quot; are correct, while &quot;<span class=\"tex-font-style-tt\">)(</span>&quot;, &quot;<span class=\"tex-font-style-tt\">(()</span>&quot; and &quot;<span class=\"tex-font-style-tt\">(()))(</span>&quot; are not.</p><p>The teacher gave Dmitry&apos;s class a very strange task&#xA0;&#x2014; she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima&apos;s turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.</p><p>Dima suspects now that he simply missed the word &quot;correct&quot; in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can <span class=\"tex-font-style-bf\">the arbitrary number of times</span> (possibly zero) perform the <span class=\"tex-font-style-it\">reorder</span> operation.</p><p>The reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes $$$l$$$ nanoseconds, where $$$l$$$ is the length of the subsegment being reordered. It&apos;s easy to see that reorder operation doesn&apos;t change the number of opening and closing brackets. For example for &quot;<span class=\"tex-font-style-tt\">))((</span>&quot; he can choose the substring &quot;<span class=\"tex-font-style-tt\">)(</span>&quot; and do reorder &quot;<span class=\"tex-font-style-tt\">)()(</span>&quot; (this operation will take $$$2$$$ nanoseconds).</p><p>Since Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it&apos;s impossible.</p>","inSpecsHtml":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^6$$$)&#xA0;&#x2014; the length of Dima&apos;s sequence.</p><p>The second line contains string of length $$$n$$$, consisting of characters &quot;<span class=\"tex-font-style-tt\">(</span>&quot; and &quot;<span class=\"tex-font-style-tt\">)</span>&quot; only.</p>","outSpecsHtml":"<div class=\"section-title\">Output</div><p>Print a single integer&#xA0;&#x2014; the minimum number of nanoseconds to make the sequence correct or &quot;<span class=\"tex-font-style-tt\">-1</span>&quot; if it is impossible to do so.</p>","noteHtml":"<div class=\"section-title\">Note</div><p>In the first example we can firstly reorder the segment from first to the fourth character, replacing it with &quot;<span class=\"tex-font-style-tt\">()()</span>&quot;, the whole sequence will be &quot;<span class=\"tex-font-style-tt\">()()())(</span>&quot;. And then reorder the segment from the seventh to eighth character, replacing it with &quot;<span class=\"tex-font-style-tt\">()</span>&quot;. In the end the sequence will be &quot;<span class=\"tex-font-style-tt\">()()()()</span>&quot;, while the total time spent is $$$4 + 2 = 6$$$ nanoseconds.</p>","sampleTestcases":[{"id":1612202248621,"input":"8\n))((())(\n","output":"6\n"},{"id":1612202248622,"input":"3\n(()\n","output":"-1\n"}],"submitUrl":"https://codeforces.com/problemset/submit","language":"c++"}